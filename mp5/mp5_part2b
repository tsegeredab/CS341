Script started on Thu 04 May 2023 06:15:46 PM EDT
tuser@tutor-vserver:~$ script mp5_part2bmtip -f watchdog.lnx[6Pcat watchdog.ctimepack_sapc.c [7Preboot.s[C
   # function to restart the application
.globl reboot
   .text
reboot:
   jmp 0x100100                    #rreboot code
   ret              
   .end

tuser@tutor-vserver:~$ cat reboot.s script mp5_part2bmtip -f watchdog.lnx[6Pcat watchdog.ctimepack_sapc.c 

/******************************************************************
*
*   file:      timepack_sapc.c
*   author:    Betty O'Neil
*   date:      '88 (MECB)
*
*   revisions: Ethan Bolker, October 1990 to #include header file timepack.h
*              Betty O'Neil, March 1992 to add inittimer
*              Betty O'Neil, S96 to SAPC
*              Bob Wilson, spring 2014
*
*   SAPC timing package.
*   Link with code containing calls to stoptimer, starttimer
*
*   To do:
*      Implement static flag set when timer is running
*        (for now everything returns T_OK)
*/

/* constants and prototypes for timing package primitives */
#include <stdio.h>
#include "timepack.h"
#include <timer.h>
#include <pic.h>
#include <cpu.h>

extern void reboot(void);
typedef enum { FALSE, TRUE } Boolean;

/* PC's 8254 timer: one tick consists of 64K counts at 1193182 counts/sec */
#define COUNTS_PER_SEC 1193182 
#define COUNTS_PER_TICK (64*1024)
/* This is a double constant--see K&R, p. 37.  Doubles are great for
 conversion constants.  Just convert back to int at end if apprpriate */
#define USECS_PER_TICK (1000000.0*COUNTS_PER_TICK/COUNTS_PER_SEC)
/* precision = time between possible values, in us */
#define TIMER_PRECISION 1

extern const IntHandler irq0inthand;

static int tickcount;
static int startcount;
static int timer_running;

void set_timer_count(int count);
void irq0inthandc(void);
void smalldelay(void);

/* set timer ticking.  This is called only once at start of program */
void inittimer()
{
  tickcount = 0;
#ifdef DEBUG
  printf("Disabling interrupts in CPU while setting them up\n");
#endif
  cli();
#ifdef DEBUG  
  printf("Setting interrupt gate for timer, irq 0\n");
#endif
  /* irq 0 maps to slot n = 0x20 in IDT for linux setup */
  set_intr_gate(TIMER0_IRQ+IRQ_TO_INT_N_SHIFT, &irq0inthand);
#ifdef DEBUG
  printf("Commanding PIC to interrupt CPU for irq 0\n");
#endif
  pic_enable_irq(TIMER0_IRQ);
  timer_running = 0;		/* starts running at call to starttimer */
#ifdef DEBUG
  printf("Commanding timer to generate a pulse train using max count\n");
#endif
  set_timer_count(0);	
#ifdef DEBUG
  printf("Enabling interrupts in CPU\n");
#endif
  sti();
}

/* This is NEEDED: future ints could find bogus int handler after this
 * code is overwritten by next download or whatever, requiring reboot.
 * This is called once at end of program.
 */
void shutdowntimer()
{
  cli();
#ifdef DEBUG
  printf("Commanding PIC to shut off irq 0 to CPU\n");
#endif
  pic_disable_irq(TIMER0_IRQ);	/* disallow irq 0 ints to get to CPU */
  sti();
}

/*  for the SAPC case:  microsecond precision (though not microsecond
 *  *accuracy* because of various overhead times involved)
*/
void querytimer(int *precision, int *running)
{
   *precision = TIMER_PRECISION;
   *running = timer_running;
   return;
}

/* start a timed experiment: improve this along with stoptimer */
int starttimer()
{
  startcount = tickcount;
  timer_running = TRUE;
  return T_OK;
}

/* temporary crude way: better to read the counter and add in the downcounts
 * (converted to us) since the last tick, and similarly change starttime 
 * to record the starting downcount, and adjust for another partial tick.
 * Remember that printf takes a *lot* of time!!  Don't do it during experiments.
 */
int stoptimer( int *interval )
{
  *interval = (tickcount - startcount)*USECS_PER_TICK;
#ifdef DEBUG
  printf("stoptimer reached, returning inaccurate time until fixed\n");
#endif
  timer_running = FALSE;
  return T_OK;
}

/* about 10 us on a SAPC (400Mhz Pentium) */
void smalldelay(void)
{
  int i;
  
  for (i=0;i<1000;i++)
    ;
}

/* Set up timer to count down from given count, then send a tick interrupt, */
/* over and over. A count of 0 sets max count, 65536 = 2**16 */
void set_timer_count(int count)
{
  outpt(TIMER_CNTRL_PORT, TIMER0|TIMER_SET_ALL|TIMER_MODE_RATEGEN);
  outpt(TIMER0_COUNT_PORT,count&0xff); /* set LSB here */
  outpt(TIMER0_COUNT_PORT,count>>8); /* and MSB here */
  smalldelay();			/* give the timer a moment to init. */
}

/* timer interrupt handler */
void irq0inthandc(void)
{
  pic_end_int();		/* notify PIC that its part is done */
  tickcount++;			/* count the tick in global var */
//  kprintf("Interrupt ISR\n");
  if (tickcount %100 == 0) reboot();
//  reboot();
}
tuser@tutor-vserver:~$ cat timepack_sapc.c [7Preboot.s[Cscript mp5_part2bmtip -f watchdog.lnx[6Pcat watchdog.c
/* watchdog.c - program to simulate a watchdog timer
   using code from typewr.c
   The needed interrupt envelope routines irq3int, etc. are in           
   the library, and sti, cli, pic_enable_irq, etc., are there too.     */
#include <stdio.h>
#include <serial.h>
#include <cpu.h>
#include <pic.h>
#include "timepack.h"
//#include <sys/cdefs.h>
extern IntHandler irq3inthand; /* the assembler envelope routine    */
void irq3inthandc(void);  /* the C core int handler, called from envelope */
void do_work(void);
void shutdown(void);
void kick_dog(void);

int done = 0;			/* global for communication with int hand */
int count = 0;
char ch;
char save_ch = '\0';

/* Note in our enviroment, interrupts are normally enabled in the CPU, so we
   use cli() as necessary even at the very start of the program */
int main(void)
{

  /* init global explicitly, so program works properly on reruns */
  done = 0;			
				 
  cli();			/* disable ints while setting them up */

  // set up interrupt for COM2 port
  printf("Calling set_intr_gate (irq = 3, n = 0x23) to arm interrupt...\n");
  set_intr_gate(COM2_IRQ+IRQ_TO_INT_N_SHIFT, &irq3inthand);

  printf("Commanding PIC to interrupt CPU for irq 3 (COM2_IRQ)\n");
  pic_enable_irq(COM2_IRQ);

  printf("enabling receiver interrupts in UART...\n");
  outpt(COM2_BASE+UART_IER, UART_IER_RDI); /* RDI = receiver data int */
 //
 // insert code to set up timer interrupt
//inittimer();  
  sti();
 //
 // enter into the main function
   printf("...done, entering almost-infinite loop\n");

   while (!done)			/* loop almost forever...*/
   {
     do_work();                         /* loop to do work */
     kick_dog(); 
  }

  //
  // All done
    shutdown();
  return 0;
}


// Function to take character received and display them with comments
void do_work(void)
{
   if(save_ch != ch)
   { 
        printf("new char received is= %c\n", ch);
        save_ch = ch;
   }
   //simulate software failure
   while (count >9 );  /* infinite loop when receiver char count >=10 */
}
void kick_dog(void){
set_timer_count(0);
inittimer();
}
void shutdown(void){
  /* here when user types 'q': shutdown ints we started up */
  cli();
  pic_disable_irq(COM2_IRQ);	/* done with irq 3 in PIC */
  outpt(COM2_BASE+UART_IER, 0); /* stop UART ints */
  sti();			/* but other ints still there */
}

/* this is called from irq3inthand, the assembler interrupt envelope routine */
/* that saves the C scratch regs on the stack, restores them after this,  */
/* then does the iret instruction.                                        */
void irq3inthandc(void)
{
  count++;
  pic_end_int();		/* notify PIC that its part is done */
  ch = inpt(COM2_BASE+UART_RX);	/* read char (ACKs UART too) */
  if (ch == 'z')
    done = 1;			/* set global flag to let main know */
}
tuser@tutor-vserver:~$ cat watchdog.ctimepack_sapc.c [7Preboot.s[Cscript mp5_part2bmtip -f watchdog.lnx
For command help, type ~?
For help on args, rerun without args
Code starts at 0x100100
Using board # 1 
~downloading watchdog.lnx

.........Done.

Download done, setting EIP to 100100.
Tutor> go 100100
Calling set_intr_gate (irq = 3, n = 0x23) to arm interrupt...
Commanding PIC to interrupt CPU for irq 3 (COM2_IRQ)
enabling receiver interrupts in UART...
...done, entering almost-infinite loop
new char received is= A
new char received is= B
new char received is= C
new char received is= D
new char received is= E
new char received is= F
new char received is= G
new char received is= 0
new char received is= 1
new char received is= 2
Calling set_intr_gate (irq = 3, n = 0x23) to arm interrupt...
Commanding PIC to interrupt CPU for irq 3 (COM2_IRQ)
enabling receiver interrupts in UART...
...done, entering almost-infinite loop
new char received is= b
new char received is= c
new char received is= d
new char received is= e
new char received is= f
new char received is= g
new char received is= M
new char received is= N
new char received is= O
new char received is= P
Calling set_intr_gate (irq = 3, n = 0x23) to arm interrupt...
Commanding PIC to interrupt CPU for irq 3 (COM2_IRQ)
enabling receiver interrupts in UART...
...done, entering almost-infinite loop
new char received is= 2
new char received is= 3
new char received is= 4
new char received is= 5
new char received is= 6
new char received is= m
new char received is= n
new char received is= o
new char received is= p
new char received is= q
Calling set_intr_gate (irq = 3, n = 0x23) to arm interrupt...
Commanding PIC to interrupt CPU for irq 3 (COM2_IRQ)
enabling receiver interrupts in UART...
...done, entering almost-infinite loop
new char received is= D
new char received is= E
new char received is= F
new char received is= G
new char received is= 0
new char received is= 1
new char received is= 2
new char received is= 3
new char received is= 4
~new char received is= 5
q 
Quit handler: 
killing process 1805 Leaving board #1
tuser@tutor-vserver:~$ exit
exit

Script done on Thu 04 May 2023 06:17:53 PM EDT
