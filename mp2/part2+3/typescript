Script started on 2023-03-20 00:28:09-04:00 [TERM="xterm-256color" TTY="/dev/pts/30" COLUMNS="172" LINES="38"]
bisrat@pe15:~/cs341/mp2/part2+3$ ls
makefile     printbinc.o   printbin.o  printbin.syms  strncpyc.o   strncpy.o  strncpy.syms  typescript	      typescript_part3
printbinc.c  printbin.lnx  printbin.s  strncpyc.c     strncpy.lnx  strncpy.s  syms	    typescript_part2
bisrat@pe15:~/cs341/mp2/part2+3$ ls -lg
total 124
-rw-r--r-- 1 cs341-1G  2082 Mar 13 11:11 makefile
-rw-r--r-- 1 cs341-1G   432 Mar 13 11:11 printbinc.c
-rw-r--r-- 1 cs341-1G  6416 Mar 19 22:09 printbinc.o
-rwxr-xr-x 1 cs341-1G 30576 Mar 19 22:11 printbin.lnx
-rw-r--r-- 1 cs341-1G   712 Mar 19 22:11 printbin.o
-rw-r--r-- 1 cs341-1G   927 Mar 19 22:11 printbin.s
-rw-r--r-- 1 cs341-1G  1093 Mar 19 22:11 printbin.syms
-rw-r--r-- 1 cs341-1G   926 Mar 13 11:11 strncpyc.c
-rw-r--r-- 1 cs341-1G  7068 Mar 19 22:12 strncpyc.o
-rwxr-xr-x 1 cs341-1G 31596 Mar 19 22:12 strncpy.lnx
-rw-r--r-- 1 cs341-1G   548 Mar 19 22:12 strncpy.o
-rw-r--r-- 1 cs341-1G   746 Mar 19 22:07 strncpy.s
-rw-r--r-- 1 cs341-1G  1055 Mar 19 22:12 strncpy.syms
lrwxrwxrwx 1 cs341-1G    12 Mar 19 22:12 syms -> strncpy.syms
-rw-r--r-- 1 cs341-1G     0 Mar 20 00:28 typescript
-rw-r--r-- 1 cs341-1G  1684 Mar 20 00:27 typescript_part2
-rw-r--r-- 1 cs341-1G  1349 Mar 20 00:26 typescript_part3
bisrat@pe15:~/cs341/mp2/part2+3$ cat printbin.s
.text
.global printbin
.data
string:
   .ascii "xxxx xxxx\0"

printbin:
    pushl %ebp       #enter (setup stack frame)
    movl %esp, %ebp

   # subl $4, %esp
    movb 8(%ebp), %al       # put value to display in al
    movl $string, %edx	    #Set up pointer to string
    call doinibble          # conv.to  4 ASCII  bits and add
    movb $ ' ', (%edx)      #add a space to the string
    incl %edx			# and increment pointer
    call doinibble		#
    movl $string, %eax		# set up return in eax
    movl %ebp, %esp		# remove stack frame (leave)
    popl %ebp
    ret
doinibble:
    movl $4, %ecx		#loop 4 times
loop0:
    shlb $1, %al       #hift msb  bit to carry flag
    jc loop1
    movb $'0', (%edx)
    jmp loop2
loop1:
    movb $'1',(%edx)     #add ascii 1 to string
 loop2:
    incl %edx       #increment pointer to string
    loop loop0      # decrement,tes, and branch back or
    ret             # return to caller

bisrat@pe15:~/cs341/mp2/part2+3$ cat printbi[K[K[K[K[K[K[Kstrncpy.s
.text
	.global mystrncpy
mystrncpy:
    pushl %ebp         #creating a stack fram
    movl %esp, %ebp    #set esp to ebp register

    movl 8(%ebp), %ecx     	#get argument s
    movl 12(%ebp), %edx		#get argument ct
    movl 16(%ebp), %edi		#get argument n    
    
loop:			                #string copy operation
    movb (%edx), %al
    movb %al, (%ecx)		#via al to destination
    incl %ecx			# increment to pointer
    incl %edx			# increment from pointer
    decl %edi			# decrement bumber of bytes moved n
    cmpb $0, %al		#check for null terminator
    jz exit
    cmpl $0, %edi
    jnz loop
exit:
    movl 8(%ebp), %eax      #then return the address of  s in %eax8
    movl %ebp, %esp		#remove stack frame
    popl %ebp
    ret
    .end
bisrat@pe15:~/cs341/mp2/part2+3$ cat make A=printbin
cat: make: No such file or directory
cat: 'A=printbin': No such file or directory
bisrat@pe15:~/cs341/mp2/part2+3$ cat makefile
# makefile: makefile for assembly-language examples
# 
# Assumes a matched pair of sources, e.g., myprog.s and myprogc.c,
# an assembler source for a function and its C driver.

# Usage: For an assembler source, say myprog.s, with a corresponding 
#  C driver myprogc.c, set A to the basename in the make command line: 
#
#  "make A=myprog myprog.lnx" or just "make A=myprog"
#
#  (since $(A).lnx is the first make target)
#  Then myprog.lnx is ready for downloading via "mtip -f myprog.lnx"
#  (followed by ~r and ~d inside the mtip program)

# also "make clean" to clean up non-source files in a directory
# All UNIX tools from ulab had been moved to LINUX by
#
#     Ron Cheung (2/28/2020)
#
# Here the assembler program has the primary source name,
# the C program is just a driver of almost the same basename:
C = $(A)c

# system directories needed for compilers, libraries, header files--
SAPC_TOOLS = /home/cheungr/serl/tutor-linux
PC_LIB = $(SAPC_TOOLS)/libc
PC_INC = $(SAPC_TOOLS)/include


CC    = gcc
CFLAGS  = -gdwarf-2 -gstrict-dwarf -march=i586 -m32 -fno-builtin -fno-stack-protector -nostdlib     -c -Wall -I$(PC_INC)
AS    = as --32
NM    = nm
LD    = ld -m elf_i386


# File suffixes:
# .c	C source (often useful both for UNIX host and SAPC)
# .s 	assembly language source
# .o  relocatable machine code, initialized data, etc., for SA PC
# .lnx  executable image (bits as in memory), for SA PC (Linux a.out format)
# .syms text file of .lnx's symbols and their values (the "symbol table")
# Symbol file "syms"--for most recently built executable in directory

# PC executable--tell ld to start code at 0x100100, load special startup
# module, special PC C libraries--

$(A).lnx: $(A).o $(C).o 
	$(LD) -N -Ttext 100100 -o $(A).lnx \
		$(PC_LIB)/startup0.o $(PC_LIB)/startup.o \
		$(C).o $(A).o $(PC_LIB)/libc.a
	rm -f syms;$(NM) -n $(A).lnx>$(A).syms;ln -s $(A).syms syms

$(A).o: $(A).s
	$(AS) -o $(A).o $(A).s

# tell gcc to use $(PC_INC) for #include <...> headers--
$(C).o: $(C).c
	$(CC) $(CFLAGS) -c -o $(C).o $(C).c
	
clean:
	rm -f *.o *.syms *.lnx core syms
bisrat@pe15:~/cs341/mp2/part2+3$ cat[K[K[Kexit
exit

Script done on 2023-03-20 00:32:23-04:00 [COMMAND_EXIT_CODE="0"]
